importScripts("readfq.min.js");self.addEventListener("message",function(k){var b={A:"",C:"",G:"",T:"",N:"",a:"",c:"",g:"",t:"",n:""};var f=false;var c=0,p;var m=k.data[1];if(k.data[2]=="file"){if(!FileReaderSync){postMessage(["txt","ERROR: FileReaderSync is not supported"]);self.close();return}var h=new FileReaderSync();p=new fastqaFileInput(k.data[4],h)}else{p=new fastqaTextInput(k.data[4])}var o=0,n=1;while(true){try{results=nextRecord(p)}catch(k){postMessage(["txt","Error: Invalid file format or a sequence is too long"]);postMessage(["result",false]);break}if(results[0]==-1){postMessage(["%",100]);if(c!=0){postMessage(["txt","Input is valid"]);postMessage(["result",true])}else{postMessage(["txt","Error: No sequences found"]);postMessage(["result",false])}break}else{if(results[0]==-2){postMessage(["txt","Error: Invalid file format"]);postMessage(["%",p.complete()]);postMessage(["result",false]);break}else{var j=false;if(results[1]["qual"]){j=true}if(j&&k.data[3]["fastq"]==false){f=true;postMessage(["txt","Error: fastq format is not accepted"])}if(j==false&&k.data[3]["fasta"]==false){f=true;postMessage(["txt","Error: fasta format is not accepted"])}if(f){postMessage(["%",p.complete()]);postMessage(["result",false]);break}var a=true;for(var g=0;g<results[1]["seq"].length&&a;++g){var l=results[1]["seq"][g];a=a&&l in b}if(a==false||results[1]["seq"].length==0){postMessage(["txt","Error: Invalid file format"]);postMessage(["%",p.complete()]);postMessage(["result",false]);break}++c;o=p.complete();if(m==0||(o/m)>=n){++n;postMessage(["%",o.toFixed(2)])}}}}self.close()},false);